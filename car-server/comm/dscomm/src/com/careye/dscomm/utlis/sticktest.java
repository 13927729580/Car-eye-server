/* car-eye车辆管理平台 
 * car-eye车辆管理公共平台   www.car-eye.cn
 * car-eye开源网址:  https://github.com/Car-eye-admin
 * Copyright car-eye 车辆管理平台  2017 
 */


package com.careye.dscomm.utlis;


public class sticktest {

	private static StringBuffer tcp7EBuffer  = new StringBuffer();
	

	/**
	 * CRC运算
	 * @param data
	 * @return
	 */
	public static int getCRC16(byte[] data){ 

		int TblCRCHi[]={ 
				0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,
				0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
				0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
				0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,
				0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
				0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,
				0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,
				0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
				0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
				0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,
				0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,
				0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
				0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,
				0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
				0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
				0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40
		}; 

		int TblCRCLo[]={ 
				0x00,0xc0,0xc1,0x01,0xc3,0x03,0x02,0xc2,0xc6,0x06,0x07,0xc7,0x05,0xc5,0xc4,0x04,
				0xcc,0x0c,0x0d,0xcd,0x0f,0xcf,0xce,0x0e,0x0a,0xca,0xcb,0x0b,0xc9,0x09,0x08,0xc8,
				0xd8,0x18,0x19,0xd9,0x1b,0xdb,0xda,0x1a,0x1e,0xde,0xdf,0x1f,0xdd,0x1d,0x1c,0xdc,
				0x14,0xd4,0xd5,0x15,0xd7,0x17,0x16,0xd6,0xd2,0x12,0x13,0xd3,0x11,0xd1,0xd0,0x10,
				0xf0,0x30,0x31,0xf1,0x33,0xf3,0xf2,0x32,0x36,0xf6,0xf7,0x37,0xf5,0x35,0x34,0xf4,
				0x3c,0xfc,0xfd,0x3d,0xff,0x3f,0x3e,0xfe,0xfa,0x3a,0x3b,0xfb,0x39,0xf9,0xf8,0x38,
				0x28,0xe8,0xe9,0x29,0xeb,0x2b,0x2a,0xea,0xee,0x2e,0x2f,0xef,0x2d,0xed,0xec,0x2c,
				0xe4,0x24,0x25,0xe5,0x27,0xe7,0xe6,0x26,0x22,0xe2,0xe3,0x23,0xe1,0x21,0x20,0xe0,
				0xa0,0x60,0x61,0xa1,0x63,0xa3,0xa2,0x62,0x66,0xa6,0xa7,0x67,0xa5,0x65,0x64,0xa4,
				0x6c,0xac,0xad,0x6d,0xaf,0x6f,0x6e,0xae,0xaa,0x6a,0x6b,0xab,0x69,0xa9,0xa8,0x68,
				0x78,0xb8,0xb9,0x79,0xbb,0x7b,0x7a,0xba,0xbe,0x7e,0x7f,0xbf,0x7d,0xbd,0xbc,0x7c,
				0xb4,0x74,0x75,0xb5,0x77,0xb7,0xb6,0x76,0x72,0xb2,0xb3,0x73,0xb1,0x71,0x70,0xb0,
				0x50,0x90,0x91,0x51,0x93,0x53,0x52,0x92,0x96,0x56,0x57,0x97,0x55,0x95,0x94,0x54,
				0x9c,0x5c,0x5d,0x9d,0x5f,0x9f,0x9e,0x5e,0x5a,0x9a,0x9b,0x5b,0x99,0x59,0x58,0x98,
				0x88,0x48,0x49,0x89,0x4b,0x8b,0x8a,0x4a,0x4e,0x8e,0x8f,0x4f,0x8d,0x4d,0x4c,0x8c,
				0x44,0x84,0x85,0x45,0x87,0x47,0x46,0x86,0x82,0x42,0x43,0x83,0x41,0x81,0x80,0x40
		}; 

		int index, CRCChkHi = 0xff, CRCChkLo = 0xff;
		int dataLen = data.length;
		for(int i=0; i <dataLen; i++){ 
			index = Math.abs( CRCChkLo ^ (data[i] & 0xff)) ;
			CRCChkLo = CRCChkHi ^ TblCRCHi[index];
			CRCChkHi = TblCRCLo[index];
		}

		return (CRCChkHi<<8 | CRCChkLo);

	}

	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//stick7EPackage("78406AAE2E86829EBCE4F5A631269344A22719A84A05463CE3DBAD34C62AE02D31CD24328DD4FE5A70793D2B27727E");
		//stick7EPackage

		//String data = "7E0801220410020029005000130024000D3D4792DA0A805742D8E77B934679E957AD5515C165DEDD8034981D2E8F13EFF9705DC60107EE8F4AEA618F03AE4D62F7064E052D4885A280128C5300A2900514C0283400948680209D78069C872A0D021D453189494804A4A601494084A4A6025368189494C421A6B74A008A33C11E869D4009495402521A043690D2010D2530434D21A6065E88BFF121D3BFEBD62FFD0455FD948D47AF14FCE4548C8D866A36148688C8A66DE6863140A314860578A4DB4862114BB68B886E28C5050869A7A530233498A48430D307DEA7D43A05ABED6707FBA2ABCCDE6DDA28E83935688EA4F55A5EB4A3B8D9508FDFB63DBF955F8F8514E6C222919A8DF843505330A63BE663EA6900ADCC0911727AD5FB556DF850371EE69495C16E76DA1DAB08B7B6D03818C722B7950018AC18875148028A60140A402514005140052F6A602521A00648B9422A188F18A044A28A63128A00434845301314524034D253108692818DA28421A69B4C08B1890FBD3E9884A434C6369B49310868A006D3698210D368029684BFF14FE9BFF5EB17FE802B40C74335136D1B6A46842B4C65A4318569850D031361A5DA4548C4228C5301B8A3148069524D18A062531850FB821845047148084D378DC07AD52DC0AD3B9865207714FB684AAE4F56ABD912B72C326179AA7272D8A983D4195C2133BFB362AF05C2D39EE34349E6AB5DC9E5C0C7D460528AD424F43180C9A7DB7E" +
		//	      "7E0801220410020029005000140024000E3D4792DA05E6B7312789791819AECBC3FA54662F36621A43C85DA0802B39DD20B9D52A05E98FCB15256221714629B00A2800A4A003AD18C52001450025029805250021AAE9F2CA568112D14C61494009450014D3400869B4D08434940C4A4A621A69280229060834B408290D50C4A4A0434D21A4034D34D5090869B40C8B414CF8734C3FF4E917FE802AF94A4CD0694A6EDA4C634AD376E690C4294812A4A4295151B0A4026DA4DB40C695A6106800C52119A062115191481094D340CAF2122A179024A84FF9CF154B4249FEC65AE4BBE0E31567CB0BCD393B8221979E2AA0505F9F5A4B601238792C4F2589A99A86EEC642E702B26F6612384072075FAD5C37227B1580AB10A46CC3CC660BDF6F5AD1DFA10749A45969FBB779F1B201F36E2323F3AEB6CEDE248C795F7474AC657D02A4DCBAA314EA918B494085A4A18051400525200A2800A05300349400D23355E4F964069899376A3140C4A31400949400534D021292980949400D349400869B4C08E4FBA685395A620A4340C4A69A004A6D310869A6801B486980EF0FA7FC535A51FF00A7387FF4015A0633499630C74D31F148646539A429499498A173418E931DC4D94C64A91A1856936D0310A530AD00214A615A00615A611486329A6819130CF5A82383CF9448";

		/*for(int i=0;i< data.length();i+=2){
			String dStr = data.substring(i, i+2);
			if("7E".equals(dStr)){
				System.out.println(dStr);
			}
		}*/
		//stick7EPackage
		//stick7EPackage


		//System.out.println(""+("7E090000FE01379548409500A500AA5500F5FF0A6E00D0024C414E44555F4453435F56312E30312E303030008E1FFFF500000006313637382E3530300034350038333035362E3735300031323933372E350031312E3100342E313200362E343500CAC700C0EBBACFC6F7CCA4B0E5B1BBB2C8CFC200D6C6B6AFCCA4B0E5B1BBCBC9BFAA00D7A4B3B5D6C6B6AFBFAAB9D8D4DAB9D8B1D5D7B4CCAC00BCD3CBD9CCA4B0E52FB2D9D7F7D5DFD1A1D4F100B5CDCBD9B5A1CBD9B5F7CBD9C6F7CAE4B3F62FCEDEC77E".length()));
		/*byte[] bytes = ParseUtil.parseHexStrToByte("40");
		System.out.println(ParseUtil.byteToString(bytes, 0, bytes.length));*/

		/*SimpleDateFormat simpleDateFormat =new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = null;
		try {
			date = simpleDateFormat.parse("2015-12-23 17:44:54");
		} catch (ParseException e) {
			e.printStackTrace();
		}
		long timeStemp = date.getTime();
		String ssString = String.valueOf(date.getTime()).substring(0, 10);
		System.out.println(ssString );*/
		
		/*String ip = "202.104.145.168"; 01030C07DA00080007000900250037 72 BC
		System.out.println(ip.split("\\.")[0]);*/
		byte[] data = ParseUtil.parseHexStrToByte("0103060873010003DD");
		System.out.println("===="+ParseUtil.byteTobit(ParseUtil.sortToByte(data)));
		String testString = ParseUtil.byteTobit(ParseUtil.sortToByte(data));
		for (int i = 0; i < testString.length(); i++) {
			System.out.println(testString.charAt(i));
		}
		
		double aa = 0.01;
		
		
		String bb = "0.01";
		
		System.out.println(1/aa);
		int cc = (int) ((1/Double.parseDouble(bb)) * aa);
		System.out.println(cc);
		
	}




	public static void stick7EPackage(String data){
		try {
			/*StringBuffer tcp7EBuffer = tcpmap.get(session);
			if(tcp7EBuffer == null){
				tcp7EBuffer = new StringBuffer();
			}*/

			String [] dataAry = data.split("7E7E");
			int num = dataAry.length;
			if(num>1){				
				for(int j = 0;j<num; j++){
					if(j==0){
						tcp7EBuffer.append(dataAry[j]+"7E");
						if(tcp7EBuffer.toString().startsWith("7E") && tcp7EBuffer.toString().endsWith("7E")){
							int tcplen  = tcp7EBuffer.toString().length();
							if(tcplen%2 == 0){
								System.out.println("tcp7EBuffer.toString()=="+tcp7EBuffer.toString());
								tcp7EBuffer  = new StringBuffer();
							}
						}
					}else if(j == (num-1)){
						if(data.endsWith("7E7E")){
							tcp7EBuffer.append("7E"+dataAry[j]+"7E");
							if(tcp7EBuffer.toString().startsWith("7E") && tcp7EBuffer.toString().endsWith("7E")){
								System.out.println("tcp7EBuffer.toString()=="+tcp7EBuffer.toString());
								tcp7EBuffer  = new StringBuffer();
							}
							tcp7EBuffer.append("7E");
						}else{
							if(dataAry[j].endsWith("7E")){
								tcp7EBuffer.append("7E"+dataAry[j]);
								if(tcp7EBuffer.toString().startsWith("7E") && tcp7EBuffer.toString().endsWith("7E")){
									System.out.println("tcp7EBuffer.toString()=="+tcp7EBuffer.toString());
									tcp7EBuffer  = new StringBuffer();
								}
							}else{
								tcp7EBuffer.append("7E"+dataAry[j]);
							}
						}
					}else{
						tcp7EBuffer.append("7E"+dataAry[j]+"7E");
						if(tcp7EBuffer.toString().startsWith("7E") && tcp7EBuffer.toString().endsWith("7E")){
							System.out.println("tcp7EBuffer.toString()=="+tcp7EBuffer.toString());
							tcp7EBuffer  = new StringBuffer();
						}
					}
				}
			}else{
				if(data.endsWith("7E7E")){
					tcp7EBuffer.append(dataAry[0]+"7E");
					if(tcp7EBuffer.toString().startsWith("7E") && tcp7EBuffer.toString().endsWith("7E")){
						System.out.println("tcp7EBuffer.toString()=="+tcp7EBuffer.toString());
						tcp7EBuffer  = new StringBuffer();
					}

					tcp7EBuffer.append("7E");
				}else{
					if(data.endsWith("7E")){
						tcp7EBuffer.append(dataAry[0]);
						if(data.startsWith("7E")){
							if(tcp7EBuffer.toString().startsWith("7E") && tcp7EBuffer.toString().endsWith("7E")){
								System.out.println("tcp7EBuffer.toString()=="+tcp7EBuffer.toString());
							}
							tcp7EBuffer  = new StringBuffer();
						}else{
							if(tcp7EBuffer.toString().startsWith("7E") && tcp7EBuffer.toString().endsWith("7E")){
								if(tcp7EBuffer.toString().startsWith("7E") && tcp7EBuffer.toString().endsWith("7E")){
									System.out.println("tcp7EBuffer.toString()=="+tcp7EBuffer.toString());
									tcp7EBuffer  = new StringBuffer();
								}
							}
						}
					}else{
						//处理分包 00007E先到 而7E0000后到的情况
						if(tcp7EBuffer.toString().endsWith("7E") && dataAry[0].startsWith("7E")){
							String outmsg = String.format("%s%s", dataAry[0],tcp7EBuffer.toString());
							if(outmsg.startsWith("7E") && outmsg.endsWith("7E")){
								System.out.println("tcp7EBuffer.toString()=="+outmsg);
								tcp7EBuffer  = new StringBuffer();
							}
						}else{
							tcp7EBuffer.append(dataAry[0]);
						}
					}
				}

			}

			//	tcpmap.put(session, tcp7EBuffer);

			System.out.println("---------------"+tcp7EBuffer.toString());

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
